import { app, BrowserWindow, dialog, ipcMain, session } from "electron";
import os from "os";
import path from "path";

import * as io from "./Application/io";
import { FileDescriptor } from "./Application/types";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainBrowserWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": ["*"],
      },
    });
  });

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // try {
  //   // wire up dev tools
  //   // NOTE: Disabling usage of devtools installer at the moment. This extension installs the latest version of React Dev tools,
  //   // which is currently broken with electron.
  //   // const extension = await installExtension(REACT_DEVELOPER_TOOLS);

  //   // Workaround: See above comment
  //   const reactDevToolsPath = path.join(
  //     os.homedir(),
  //     "AppData/Local/Google/Chrome/User Data/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi"
  //   );
  //   const extension = await session.defaultSession.loadExtension(
  //     reactDevToolsPath
  //   );

  //   console.log("Loaded devtools: ", extension.name);
  // } catch (err) {
  //   console.log("failed to load devtools: ", err);
  // }

  // TEMP
  console.log("test");
  setTimeout(() => {
    console.log("sending update files");
    mainWindow.webContents.send("app:update-files", io.getFiles());
  }, 5000);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  io.watchFiles(io.appDir, mainWindow);
  mainBrowserWindow = mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// File watch code
// return list of files
ipcMain.handle("app:get-files", (): FileDescriptor[] => {
  return io.getFiles();
});

ipcMain.handle("app:watch-filepath", (_, filepath: string) =>
  io.watchFiles(filepath, mainBrowserWindow)
);

// listen to file(s) add event
ipcMain.handle("app:on-file-add", (event, files = []) => {
  io.addFiles(files);
});

// open filesystem dialog to choose files
ipcMain.handle("app:on-fs-dialog-open", () => {
  const files = dialog.showOpenDialogSync({
    properties: ["openFile", "multiSelections"],
  });

  if (!files || !files.length) {
    return;
  }

  io.addFiles(
    files.map((filepath) => {
      return {
        name: path.parse(filepath).base,
        path: filepath,
      };
    })
  );
});

ipcMain.handle("app:load-file", (_, filepath) => {
  return io.openFile(filepath);
});

// listen to file delete event
ipcMain.on("app:on-file-delete", (event, file) => {
  io.deleteFile(file.filepath);
});

// listen to file open event
ipcMain.on("app:on-file-open", (event, file) => {
  io.openFile(file.filepath);
});

// listen to file copy event
ipcMain.on("app:on-file-copy", (event, file) => {
  event.sender.startDrag({
    file: file.filepath,
    icon: path.resolve(__dirname, "./resources/paper.png"),
  });
});
