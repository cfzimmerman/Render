type PostViewTracker @model @auth(rules: [{ allow: public }]) {
  id: ID!
  postsID: ID
    @index(name: "byPosts")
    @index(name: "postViewByPostID", queryField: "postViewByPostID", sortKeyFields: ["viewerID"])
  Posts: Posts @belongsTo
  viewerID: ID @index(name: "byUsers")
  Users: Users @belongsTo
}

type UserRelationships @model @auth(rules: [{ allow: public }]) {
  receivercognitosub: String
    @index(
      name: "relationshipsByReceiverDate"
      queryField: "relationshipsByReceiverDate"
      sortKeyFields: ["createdAt"]
    )
  sendercognitosub: String
    @index(
      name: "relationshipsBySenderDate"
      queryField: "relationshipsBySenderDate"
      sortKeyFields: ["createdAt"]
    )
    @index(
      name: "verifyAddedUser"
      queryField: "verifyAddedUser"
      sortKeyFields: ["receivercognitosub"]
    )
    @index(name: "addedUsersByCurrentUser", queryField: "addedUsersByCurrentUser")

  id: ID!
  createdAt: String!
  usersID: ID! @index(name: "byUsers")
  Users: Users @belongsTo(fields: ["usersID"])
  senderID: ID @index(name: "bySender")

  SenderUser: Users @belongsTo(fields: ["senderID"])
  receiverID: ID
    @index(name: "byReceiver")
    @index(
      name: "receiverRelationshipsByDate"
      queryField: "receiverRelationshipsByDate"
      sortKeyFields: ["createdAt"]
    )
  ReceiverUser: Users @belongsTo(fields: ["receiverID"])
}

type Comments @model @auth(rules: [{ allow: public }]) {
  id: ID!
  commenttext: String
  postsID: ID
    @index(name: "byPosts")
    @index(
      name: "commentsByCreatedDate"
      queryField: "commentsByCreatedDate"
      sortKeyFields: ["createdAt"]
    )
  Posts: Posts @belongsTo(fields: ["postsID"])
  usersID: ID @index(name: "byUsers")
  Users: Users @belongsTo(fields: ["usersID"])
  createdAt: String!
}

type Posts @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  aspectratio: Float
  cognitosub: String!
    @index(
      name: "postsByCreatedDate"
      queryField: "postsByCreatedDate"
      sortKeyFields: ["createdAt"]
    )
    @index(
      name: "postsByPostedDate"
      queryField: "postsByPostedDate"
      sortKeyFields: ["publicpostdate"]
    )
    @index(
      name: "postsByContentDate"
      queryField: "postsByContentDate"
      sortKeyFields: ["contentdate"]
    )
  contentdate: AWSDateTime
  contentkey: String @index(name: "postsByContentKey", queryField: "postsByContentKey")
  contentlastupdated: AWSDateTime
  contenttype: String
  createdAt: String!
  deleteddate: AWSDateTime
  posttext: String
  publicpost: Boolean
  publicpostdate: AWSDateTime
  sizeinbytes: Int
  thumbnailkey: String
  type: String
    @index(
      name: "postsByPublicDate"
      queryField: "postsByPublicDate"
      sortKeyFields: ["publicpostdate"]
    )
  usersID: ID!
    @index(name: "byUsers")
    @index(
      name: "postsByDeletedDate"
      queryField: "postsByDeletedDate"
      sortKeyFields: ["deleteddate"]
    )
  Users: Users @belongsTo(fields: ["usersID"])
  Comments: [Comments] @hasMany(indexName: "byPosts", fields: ["id"])
  PostViewTrackers: [PostViewTracker] @hasMany(indexName: "byPosts", fields: ["id"])
}

type Users @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  acceptedtos: Boolean
  addedcount: Int
  addedmecount: Int
  birthday: AWSDate
  cognitosub: String @index(name: "userByCognitosub", queryField: "userByCognitosub")
  displayname: String
  email: AWSEmail @index(name: "userByEmail", queryField: "userByEmail")
  emailconfirmed: Boolean
  firstvaultupload: Boolean
  fullyauthenticated: Boolean
  gamertag: String @index(name: "userByGamertag", queryField: "userByGamertag")
  mostrecentpublicpost: AWSDateTime
  pfp: String
  setpassword: Boolean
  storagesizeinbytes: Float
  type: String
    @index(name: "searchByGamertag", sortKeyFields: ["gamertag"], queryField: "searchByGamertag")
  Comments: [Comments] @hasMany(indexName: "byUsers", fields: ["id"])
  Posts: [Posts] @hasMany(indexName: "byUsers", fields: ["id"])
  PostViewTrackers: [PostViewTracker] @hasMany(indexName: "byUsers", fields: ["id"])
  UserRelationships: [UserRelationships] @hasMany(indexName: "byUsers", fields: ["id"])
  SenderRelationships: [UserRelationships] @hasMany(indexName: "bySender", fields: ["id"])
  ReceiverRelationships: [UserRelationships] @hasMany(indexName: "byReceiver", fields: ["id"])
}
