import { Storage, API, graphqlOperation } from 'aws-amplify';
import { Users, Posts } from '../../../models';
import { listUserOTPS, listUsers, listUserExtras, } from '../../../graphql/queries';
import { createUsers, createUserOTP, createPosts } from '../../../graphql/mutations';
import { listUserID, filteredPostsByCreatedDate, filteredPostsByPostedDate, } from '../../../graphql/customqueries';

async function GetAddedFeedData ({ dispatch, page, currentuser, test }) {

/*
    const filter = {
        contentkey: {
            eq: 'e574df6b-d3cf-4181-a76d-dc637c1d7aaa.jpg'
        },
    }


    // const result = await API.graphql(graphqlOperation(listUserOTPS, { filter: filter }))
    
    const result = await API.graphql(graphqlOperation(`
        query ListPosts {
            listPosts (filter: {
                contentkey: {
                    eq: "e574df6b-d3cf-4181-a76d-dc637c1d7aaa.jpg"
                }
            }) {
                items {
                    id
                    contentdate
                    Users {
                        id
                        displayname
                    }
                }
            }
        }
    `
    )) 
    */

    /*
    const result = await API.graphql(graphqlOperation(`
    query ListRelationships {
        listUserRelationships (filter: {
            receivercognitosub: {
                eq: "1ac07505-16e4-4686-88e0-c5bb2a545320"
            }
        }) {
            items {
                id
                sendercognitosub
                receivercognitosub
                _deleted
            }
        }
    }
`
)) 
    
CREATE

    const userotpobject = {
        useremail: 'bro@fam.com',
        currentotp: 123456,
        userdisplayname: 'asdf',
    }

    const result = await API.graphql(graphqlOperation(createUserOTP, { input: userotpobject }))

UPDATE

    const userotpobject = {
        id: "5a889154-4ea1-4dae-9891-03fa1d2315a8",
        userdisplayname: 'Updated Displayname',
        _version: 8
    }

    const updatedresult = await API.graphql(graphqlOperation(updateUserOTP, { input: userotpobject }))

DELETE
    const userotpobject = {
        id: '5a889154-4ea1-4dae-9891-03fa1d2315a8',
        _version: 9,
    }

    const deletedresult = await API.graphql(graphqlOperation(deleteUserOTP, { input: userotpobject }))
    

GOOD EXAMPLES

    const result = await API.graphql(graphqlOperation(listUserOTPS, { filter: { useremail: { eq: 'admin@render.game' }} }))
    const currentotp = result.data.listUserOTPS.items[0].currentotp
    const result = await API.graphql(graphqlOperation(filteredRelationshipsByReceiverDate, { limit: 2, receivercognitosub: cognitosub, sortDirection: "DESC", nextToken: null, }))

    */

    // Cory: "f4443fd8-119c-4a27-a1ea-89b033e3c035"
    // Ethan: "8aac7e8e-709c-45fd-8af2-80304a5aab4e"

    const cognitosub = "f4443fd8-119c-4a27-a1ea-89b033e3c035"
    const item = {
        sendercognitosub: "8aac7e8e-709c-45fd-8af2-80304a5aab4e",
    }


    /*


    */

    

    const result = await API.graphql(graphqlOperation(filteredPostsByCreatedDate, { cognitosub: cognitosub, limit: 1, sortDirection: "DESC", nextToken: null, }))
    console.log('\nTopPost: ' + JSON.stringify(result.data.postsByCreatedDate.items[0]))

    // console.log('\n' + JSON.stringify(result))
    

}

export default GetAddedFeedData;

 THIS TO CHANGE EVERY ELEMENT OF EVERY DOCUMENT IN THE DB
 
    const result = await API.graphql(graphqlOperation(listUsers))

    const userarray = result.data.listUsers.items

    
    userarray.forEach(item => {

        async function UpdateUserExtras ({ item }) {
            const extrasresult = await API.graphql(graphqlOperation(listUserOTPS, { filter: { useremail: { eq: item.email } } }))
            const extra = extrasresult.data.listUserOTPS.items[0]

            const updated = {
                id: extra.id,
                usersID: item.id,
            }

            const updatedresult = await API.graphql(graphqlOperation(updateUserOTP, { input: updated }))
            console.log('\nUpdatedResult: ' + JSON.stringify(updatedresult))

        }

        UpdateUserExtras({ item: item })
    })


ALERT
Alert.alert(
    "Alert Title",
    `\nuserresult: ${JSON.stringify(userresult)}
    \nnewuserextras: ${JSON.stringify(newuserextras)} 
    \ndeleteme: ${JSON.stringify(deleteme)}
    `,
    [
        {
        text: "Cancel",
        onPress: () => console.log("Cancel Pressed"),
        style: "cancel"
        },
        { text: "OK", onPress: () => console.log("OK Pressed") }
    ]
);



ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸ğŸ‡ºğŸ‡¸


TODO:
- Replace instances of filteredPostsByCreatedDate with a postsByContentDate
- Check ModifyVaultData for bugs, fix as needed
- Check Redux functions for ModifyVaultData, finalize "add" functionality once complete
- Add "remove" functionality for ModifyVaultData